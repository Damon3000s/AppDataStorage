---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## HEADERS

This file defines all project rules, coding standards, workflow guidelines, references, documentation structures, and best practices for the AI coding assistant. It is a living document, evolving with new userâ€“AI interactions.

## TECH STACK

- PowerShell
- .NET
- Git
- TestableIO.System.IO.Abstractions
- TestableIO.System.IO.Abstractions.TestingHelpers
- TestableIO.System.IO.Abstractions.Wrappers
- dotnet-reportgenerator-globaltool

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- CHANGELOG.md: Auto-generated changelog from git history.  Stores a comprehensive history of all versions, ordered from newest to oldest, including version number/type, changes since last version, and author attributions.
- LATEST_CHANGELOG.md: Latest version's changelog for GitHub releases. Contains only changes for the current version.
- VERSION.md: Stores current version information.
- README.md: Project documentation.
- AUTHORS.md: List of contributors from git history.
- COPYRIGHT.md: Copyright information.
- PROJECT_URL.url: Link to project repository.
- AUTHORS.url: Link to organization/owner.

## CODING STANDARDS

- Follow established PowerShell best practices.
- Ensure proper error handling and logging.
- Use clear and concise code.
- Maintain consistent formatting.
- When using `System.IO.Abstractions`, ensure the correct namespace is referenced.
- When exposing mock filesystem functionality for testing, use the "Test-Only Configuration" pattern (Option 3) to avoid exposing internal implementation details and maintain better encapsulation.  Specifically:
  - Make the `FileSystem` property internal get-only.
  - Create a `ConfigureForTesting()` method that accepts a `Func<IFileSystem>` factory, validates that it is a mock or test filesystem, and sets the internal `FileSystem` property. The factory approach ensures thread safety during concurrent tests.
  - Add a `ResetFileSystem()` method to reset the `FileSystem` to the default implementation.
  - Use `ThreadLocal<IFileSystem>` to ensure each test thread gets its own filesystem instance for thread safety during concurrent tests.
  - **Important Consideration:** `ThreadLocal` stores a reference to the `MockFileSystem` instance, not a copy of the object. Ensure thread safety within the `MockFileSystem` implementation itself if mutable state is involved.
  - **For concurrent/parallel tests, always use the factory pattern for `ConfigureForTesting()` to ensure each test gets its own isolated `MockFileSystem` instance. Therefore, when configuring the `AppData` class for testing, always use the factory-based overload of `ConfigureForTesting`: `AppData.ConfigureForTesting(() => new MockFileSystem());` instead of `AppData.ConfigureForTesting(new MockFileSystem());` to ensure each test gets its own isolated `MockFileSystem` instance.**
  - **The `ConfigureForTesting` method should be called once, and the factory should be re-invoked for each test so that it gets a new instance for that thread without interfering with any other threads. The cached instance MUST be cleared for each test.**
  - **Every test must configure a new mock filesystem instance by re-invoking the factory.**
- **Exception Handling:** Avoid catching generic exceptions (`Exception`). Instead, catch specific exception types or use a `when` clause to filter exceptions. For example, `catch (Exception ex) when (ex is not OperationCanceledException and not ThreadInterruptedException)`.
- **.NET 9+ `System.Threading.Lock` Value Type Handling:** When testing code that uses `System.Threading.Lock` in .NET 9 or later, be aware that it is a value type. Avoid boxing it to `object` when performing type checks, as this can lead to unintended monitor-based locking. Instead, use `GetType()` to directly compare the type, e.g., `Type lockType = TestAppData.Lock.GetType(); Assert.AreEqual(typeof(Lock), lockType);`
- **Sealed Class Virtual Member Rule:** A sealed class cannot have virtual members because sealed classes cannot be inherited from. If a class is sealed, any virtual members must be removed or the class must be unsealed.

## DEBUGGING

- Use `dotnet build --verbosity normal` to get more detailed build error messages.
- The following IDE and compiler errors cannot be automatically fixed using "Fix All in Solution":
  - IDE1007 with code fixes: `CSharpSpellCheckCodeFixProvider`, `CSharpFullyQualifyCodeFixProvider`, `GenerateTypeCodeFixProvider`, `CSharpAddImportCodeFixProvider`
  - CA1506: No associated code fix found.
  - CA1812: No associated code fix found.
  - CS0246 with code fixes: `CSharpMakeMethodAsynchronousCodeFixProvider` (didn't return a Fix All action), `CSharpGenerateVariableCodeFixProvider`
  - CA1031: No associated code fix found.

## WORKFLOW & RELEASE RULES

- When generating changelogs, output the logs for the latest version to a separate file so it can be used as the body of the GitHub release.
- Increase test coverage for all components. Specifically focus on:
  - Error handling and edge cases, specifically around file operations.
  - Complex backup scenarios, such as timestamped backups when multiple backups exist.
  - Thread safety, including more complex concurrent scenarios.
  - Configuration and initialization, considering different scenarios for app data paths.
  - File system abstraction edge cases.
  - JSON serialization edge cases.

## CHANGELOG MANAGEMENT

### Full Changelog

The module automatically generates a comprehensive `CHANGELOG.md` file containing entries for all versions, ordered from newest to oldest. Each entry includes:

- Version number and type (major, minor, patch, prerelease)
- List of changes since the previous version
- Author attributions for each change

### Latest Version Changelog

For GitHub releases, the module extracts just the latest version's changelog to a separate file (default: `LATEST_CHANGELOG.md`). This file contains only the changes for the current version, making it ideal for use as GitHub release notes.

When creating a GitHub release with `New-GitHubRelease`, the module automatically:

1. Checks for the latest version changelog file
2. Uses it as the release notes if available
3. Falls back to the full changelog if necessary

You can customize the latest changelog file path using the `LatestChangelogFile` parameter in `Get-BuildConfiguration`.